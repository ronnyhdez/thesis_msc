# Use of machine learning methods to predict GPP from VI's on a daily and weekly basis

## Introduction

## Methods

```{r libraries and sources}
#| echo: false
#| message: false
#| warning: false

# Libraries
library(ggplot2)
library(cowplot)
library(lubridate)
library(purrr)
library(broom)
library(gt)
library(tidymodels)
library(broom)
library(usemodels)
library(vip)
library(h2o)

# Source files
# Source the objects created for the complete GPP trends.
# This file will source the code and load objects to memory.
source("scripts/trend_plots.R")

# Source the objects created for the complete GPP trends
source("scripts/models_data_preparation.R")

# Source file with functions to plot rf predictions
source("R/plot_exploratory.R")
```

### Data Analysis

#### Random Forests

Regression Random forests were used as an approach to predict GPP by incorporating all available bands values from the MODIS dataset and the VIs. The primary 
objective was to assess the relative importance of these variables in predicting
GPP. The RF models were created using both daily and weekly datasets allowing 
for an analysis of GPP prediction across different time scales.

To implement the RF models, the `ranger` package [@wright_ranger_2017] was 
employed, utilizing 1000 trees within the forest ensemble. The models were 
trained using bootstrap resampling with 100 folds, which helps to improve the
robustness and accuracy of the predictions. 


#### AutoML

Corporis cumque voluptate cum fuga consequuntur pariatur. Excepturi perspiciatis omnis dolores dolorum officiis a consequatur. Quae distinctio quae ullam sit id. Quasi minima voluptatibus nihil ut quibusdam aut tempore nam. Repudiandae quasi quis ipsa aut. Temporibus ut rerum ea a est voluptate.

Corporis iusto necessitatibus aut rerum eum. Voluptatem repellendus soluta doloremque. Et reiciendis et animi ut enim. Fugiat consequatur hic laborum culpa blanditiis explicabo nobis quae. Quae pariatur quo et hic autem.


## Results

### Random Forest as a better prediction model

```{r data_preparation_rf}
#| echo: false
#| message: false
#| warning: false

# 500
# Dataset to use: daily_500 for all sites
bor <- borden_daily_500 %>% 
  select(ends_with(c("_mean")),
         gpp_dt_vut_ref, total_obs) %>% 
  mutate(site = "borden")

bar <- bartlett_daily_500 %>% 
  select(ends_with(c("_mean")),
         gpp_dt_vut_ref, total_obs) %>% 
  mutate(site = "bartlett")

mich <- michigan_daily_500 %>% 
  select(ends_with(c("_mean")),
         gpp_dt_vut_ref, total_obs) %>% 
  mutate(site = "michigan")

daily_500_rf <- bind_rows(bor, bar, mich)

# Dataset to use: weekly_500 for all sites
bor <- borden_weekly_500 %>% 
  select(ends_with(c("_mean")),
         gpp_dt_vut_ref, total_obs) %>% 
  mutate(site = "borden")

variables <- names(bor)

bar <- bartlett_weekly_500 %>% 
  mutate(site = "bartlett") %>% 
  select(all_of(variables))

mich <- michigan_weekly_500 %>% 
  mutate(site = "michigan") %>% 
  select(all_of(variables))

weekly_500_rf <- bind_rows(bor, bar, mich)
```

#### Daily 500

```{r daily_500_rf}
#| echo: false
#| message: false
#| warning: false

## Make sure that the source of the file "R/plot_exploratory.R" was succesful

set.seed(123)
daily_500_split <- initial_split(daily_500_rf, strata = site)
daily_500_train <- training(daily_500_split)
daily_500_test <- testing(daily_500_split)

set.seed(234)
# daily_500_folds 
daily_500_folds <- bootstraps(daily_500_train,
                              times = 100,
                              strata = gpp_dt_vut_ref)

ranger_recipe <- 
  recipe(formula = gpp_dt_vut_ref ~ ., data = daily_500_train) %>% 
  step_select(-site, -total_obs)

ranger_spec <- 
  rand_forest(mtry = tune(), min_n = tune(), trees = 1000) %>% 
  set_mode("regression") %>% 
  set_engine("ranger") 

ranger_workflow <- 
  workflow() %>% 
  add_recipe(ranger_recipe) %>% 
  add_model(ranger_spec) 

set.seed(3156)

# Conditional to re-run model if no artifac was saved before.
if (fs::file_exists("models/daily_500_fit_site.rds") & 
    fs::file_exists("models/daily_500_site_ranger_tune.rds")) {
  
  daily_500_fit <- readRDS("models/daily_500_fit_site.rds")
  ranger_tune <- readRDS("models/daily_500_site_ranger_tune.rds")
  
} else {  
  doParallel::registerDoParallel()
  ranger_tune <-
    tune_grid(ranger_workflow, 
              resamples = daily_500_folds, 
              grid = 12)
  
  # Final fit
  final_rf <- ranger_workflow %>% 
    finalize_workflow(select_best(ranger_tune))
  
  daily_500_fit <- last_fit(final_rf, daily_500_split)
  
  ## last_fit is saved if no model has been trained and saved.
  saveRDS(ranger_tune, "models/daily_500_site_ranger_tune.rds")
  saveRDS(daily_500_fit, "models/daily_500_fit_site.rds")
}
```


```{r predictions_plot_daily_500_rf}
#| label: fig-daily_500_rf
#| fig-cap: GPP observed and predicted values from the Random Forest model for all the sites at a daily basis. The red line represents a 1:1 relation.
#| echo: false
#| message: false
#| warning: false

# Explore RF results
## Check the metrics
metrics <- collect_metrics(daily_500_fit) 

## Collect predictions
plot_predictions_rf(daily_500_fit, metrics, 4, 4, 23.5, 22) 
```


```{r vip_plot_daily_500_rf}
#| label: fig-vip_daily_500_rf
#| fig-cap: "Variable of importance derived from the Random forest model for the daily values at 500 m spatial resolution model."
#| echo: false
#| message: false
#| warning: false

## Feature importance
imp_spec <- ranger_spec %>%
  finalize_model(select_best(ranger_tune)) %>%
  set_engine("ranger", importance = "permutation")

workflow() %>%
  add_recipe(ranger_recipe) %>%
  add_model(imp_spec) %>%
  fit(daily_500_train) %>%
  extract_fit_parsnip() %>%
  vip(aesthetics = list(alpha = 0.8, fill = "midnightblue")) +
  theme_light(base_size = 12)
```

#### Weekly 500

```{r weekly_500_rf}
#| echo: false
#| message: false
#| warning: false
set.seed(123)

weekly_500_split <- initial_split(weekly_500_rf, strata = site)
weekly_500_train <- training(weekly_500_split)
weekly_500_test <- testing(weekly_500_split)

set.seed(234)
weekly_500_folds <- bootstraps(weekly_500_train,
                              times = 100,
                              strata = gpp_dt_vut_ref)
ranger_recipe <- 
  recipe(formula = gpp_dt_vut_ref ~ ., data = weekly_500_train) %>% 
  step_select(-site, -total_obs)

ranger_spec <- 
  rand_forest(mtry = tune(), min_n = tune(), trees = 1000) %>% 
  set_mode("regression") %>% 
  set_engine("ranger") 

ranger_workflow <- 
  workflow() %>% 
  add_recipe(ranger_recipe) %>% 
  add_model(ranger_spec) 

# Conditional to re-run model if no artifac was saved before.
if (fs::file_exists("models/weekly_500_fit_site.rds")) {
  weekly_500_fit <- readRDS("models/weekly_500_fit_site.rds")
  ranger_tune <- readRDS("models/weekly_500_site_ranger_tune.rds")
} else {
  set.seed(3156)
  
  doParallel::registerDoParallel()
  ranger_tune <-
    tune_grid(ranger_workflow, 
              resamples = weekly_500_folds, 
              grid = 12)
  
  # Final fit
  final_rf <- ranger_workflow %>% 
    finalize_workflow(select_best(ranger_tune))
  
  weekly_500_fit <- last_fit(final_rf, weekly_500_split)
  
  ## last_fit is saved if no model has been trained and saved.
  saveRDS(ranger_tune, "models/weekly_500_site_ranger_tune.rds")
  saveRDS(weekly_500_fit, "models/weekly_500_fit_site.rds")
}
```


```{r predictions_plot_weekly_500_rf}
#| label: fig-weekly_500_rf
#| fig-cap: "GPP observed and predicted values from the Random Forest for all the sites at a weekly basis. The red line represents a 1:1 relation."
#| echo: false
#| message: false
#| warning: false

# Explore RF results
## Check the metrics
metrics <- collect_metrics(weekly_500_fit) 

## Collect predictions
plot_predictions_rf(weekly_500_fit, metrics, 4, 4, 16, 17)
```


```{r vip_plot_weekly_500_rf}
#| label: fig-vip_weekly_500_rf
#| fig-cap: "Variable of importance derived from the Random forest model for the weekly values at 500 m spatial resolution model."
#| echo: false
#| message: false
#| warning: false

## Feature importance
imp_spec <- ranger_spec %>%
  finalize_model(select_best(ranger_tune)) %>%
  set_engine("ranger", importance = "permutation")

workflow() %>%
  add_recipe(ranger_recipe) %>%
  add_model(imp_spec) %>%
  fit(weekly_500_train) %>%
  extract_fit_parsnip() %>%
  vip(aesthetics = list(alpha = 0.8, fill = "midnightblue")) +
  theme_classic(base_size = 12)
```


### The potential of AutoML approaches for GPP predictions

#### Daily autoML

```{r}
#| label: fig-predictions_automl_500
#| fig-cap: "Variable of importance derived from the autoML model for the daily values at 500 m spatial resolution model."
#| echo: false
#| message: false
#| warning: false

predictions_automl <- readRDS("models/predictions_automl.rds")
perf <- readRDS("models/performance_automl.rds")

rsq <- h2o.r2(perf)
rmse <- h2o.rmse(perf)

plot_predictions_automl(predictions_automl, rmse, rsq, 3, 3, 15, 16)
```


```{r automl_importance_variable}
#| label: fig-vip_daily_500_automl
#| fig-cap: "Variable of importance derived from the autoML model for the daily values at 500 m spatial resolution model."
#| fig-width: 7
#| fig-height: 8
#| echo: false
#| message: false
#| warning: false

readRDS("models/automl_va_plot.rds") +
  theme_classic(base_size = 12) +
  scale_fill_viridis_c(direction = -1) +
  labs(title = NULL, x = "Model ID") +
  theme(axis.text.x = element_text(angle = 55, h = 1))
```

#### Weekly autoML


```{r}
#| label: fig-predictions_automl_weekly_500
#| fig-cap: "Variable of importance derived from the autoML model for the weekly values at 500 m spatial resolution model."
#| echo: false
#| message: false
#| warning: false

predictions_automl <- readRDS("models/predictions_automl_weekly.rds")
perf <- readRDS("models/performance_automl_weekly.rds")

rsq <- h2o.r2(perf)
rmse <- h2o.rmse(perf)

plot_predictions_automl(predictions_automl, rmse, rsq, 4, 4, 15, 16)
```


```{r automl_importance_variable_weekly}
#| label: fig-vip_daily_500_automl_weekly
#| fig-cap: "Variable of importance derived from the autoML model for the weekly values at 500 m spatial resolution model."
#| fig-width: 7
#| fig-height: 8
#| echo: false
#| message: false
#| warning: false

readRDS("models/automl_va_plot_weekly.rds") +
  theme_classic(base_size = 12) +
  scale_fill_viridis_c(direction = -1) +
  labs(title = NULL, x = "Model ID") +
  theme(axis.text.x = element_text(angle = 55, h = 1))
```


\newpage

## Discussion


Corporis cumque voluptate cum fuga consequuntur pariatur. Excepturi perspiciatis omnis dolores dolorum officiis a consequatur. Quae distinctio quae ullam sit id. Quasi minima voluptatibus nihil ut quibusdam aut tempore nam. Repudiandae quasi quis ipsa aut. Temporibus ut rerum ea a est voluptate.

Corporis iusto necessitatibus aut rerum eum. Voluptatem repellendus soluta doloremque. Et reiciendis et animi ut enim. Fugiat consequatur hic laborum culpa blanditiis explicabo nobis quae. Quae pariatur quo et hic autem.

Sunt velit eos repellat inventore quia sunt. Et optio aut distinctio non expedita nulla sint. Explicabo sint tempore est in sunt dolores et. Modi sint earum veniam perspiciatis. Velit at beatae nam fugiat iusto.

Sed velit ipsum in qui expedita praesentium. Neque vero optio qui cumque sint. Error possimus dolor quisquam vero aut.

Autem non labore numquam. Eveniet facere id qui impedit. Sunt temporibus sit neque fugiat. Consequatur sit maiores dolorum libero provident a laudantium. Ipsum sit fugiat quis consectetur sed a provident veritatis. Consequuntur laudantium aut libero facere animi ipsum et hic.

\newpage

## References

**Just the references of this chapter, that also needs to be included in the
final references.**

::: {#refs}
:::
